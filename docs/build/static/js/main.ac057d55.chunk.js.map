{"version":3,"sources":["generated/graphql.tsx","components/Launches/Launches.tsx","components/Launch/Launch.tsx","App.tsx","index.tsx"],"names":["CapsuleRange","Order","LaunchRange","CacheControlScope","LaunchDocument","gql","LaunchesDocument","Launches","clickHandler","id","baseOptions","ApolloReactHooks","data","error","loading","className","JSON","stringify","launches","map","flight_number","mission_name","launch_year","Launch","variables","String","launch","launch_success","rocket","rocket_name","rocket_type","details","flickr_images","links","image","i","key","src","alt","App","useState","setId","useCallback","newId","role","href","client","ApolloClient","uri","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gJAsMYA,EAKAC,EA8VAC,EAoLAC,E,sqBAvhBAH,K,YAAAA,E,qBAAAA,M,cAKAC,K,UAAAA,E,aAAAA,M,cA8VAC,K,gBAAAA,E,YAAAA,E,YAAAA,E,qBAAAA,M,cAoLAC,K,gBAAAA,E,mBAAAA,M,KAyCL,IAAMC,EAAiBC,IAAH,KAkEpB,IAAMC,EAAmBD,IAAH,KC/zB7B,IA2CeE,EA3CE,SAAC,GAAuC,EAArCC,aAAqC,EAAvBC,GAAwB,ID22BzBC,EC32BwB,ED42B1CC,IAAiEL,EAAkBI,GC32BxFE,EAD+C,EAC/CA,KAAMC,EADyC,EACzCA,MAEd,GAHuD,EAClCC,QAGnB,OAAO,yBAAKC,UAAU,oBAAf,cAGT,GAAIF,IAAUD,EACZ,OAAO,yBAAKG,UAAU,sBAAsBC,KAAKC,UAAUJ,IARN,IAW/CK,EAAaN,EAAbM,SAER,OACE,yBAAKH,UAAU,QACb,wBAAIA,UAAU,eAAd,YACA,wBAAIA,UAAU,+BACXG,EAASC,KACR,cAAGC,cAAH,EAAkBC,aAAlB,EAAgCC,kBCgC3BC,EAvDA,SAAC,GAA4B,IF2zBbb,EE3zBbD,EAAyB,EAAzBA,GAAyB,GF2zBZC,EE1zBgC,CAC3Dc,UAAW,CAAEf,GAAIgB,OAAOhB,KF0zBbE,IAA6DP,EAAgBM,IE3zBlFE,EADiC,EACjCA,KAAMC,EAD2B,EAC3BA,MAId,GALyC,EACpBC,QAKnB,OAAO,yBAAKC,UAAU,oBAAf,cAGT,GAAIF,EACF,OAAO,yBAAKE,UAAU,sBAAsBC,KAAKC,UAAUJ,IAG7D,IAAKD,EACH,OAAO,+DAdgC,MA0BrCA,EARFc,OAEEL,GApBqC,EAmBrCD,cAnBqC,EAoBrCC,cACAM,EArBqC,EAqBrCA,eArBqC,IAsBrCC,OAAUC,EAtB2B,EAsB3BA,YAAaC,EAtBc,EAsBdA,YACvBC,EAvBqC,EAuBrCA,QACSC,EAxB4B,EAwBrCC,MAASD,cAGb,OACE,yBAAKjB,UAAU,QACb,yBAAKA,UAAU,eACZM,EAAc,IACf,0BAAMN,UAAU,oCACbY,IAGL,yBAAKZ,UAAU,aACb,wBAAIA,UAAU,cACXc,EAAa,IACd,0BAAMd,UAAU,oCACbe,IAGL,uBAAGf,UAAU,aAAagB,IAE5B,wBAAIhB,UAAU,+BACXiB,EAAcb,KAAI,SAACe,EAAeC,GAAhB,OACjB,wBAAIC,IAAKD,EAAGpB,UAAU,mBACpB,yBAAKA,UAAU,YAAYsB,IAAKH,EAAOI,IAAKJ,WCfzCK,EAhCH,WAAO,IAAD,EACIC,mBAAS,IADb,mBACT/B,EADS,KACLgC,EADK,KAEVjC,EAAekC,uBAAY,SAACC,GAAD,OAAWF,EAAME,KAAQ,IAC1D,OACE,oCACE,yBAAK5B,UAAU,qCACb,yBAAKA,UAAU,aACb,0BAAMA,UAAU,wBAAhB,qBAGJ,0BAAMA,UAAU,iBAAiB6B,KAAK,QACpC,yBAAK7B,UAAU,OACb,yBAAKA,UAAU,YACb,kBAAC,EAAa,CAAEP,eAAcC,QAEhC,yBAAKM,UAAU,YACb,kBAAC,EAAD,CAAQN,GAAIA,OAIlB,4BAAQM,UAAU,2BAChB,yBAAKA,UAAU,aACb,uBAAGA,UAAU,eACX,uBAAG8B,KAAK,KAAR,gBAEF,kDClBJC,EAAS,IAAIC,IAAa,CAC9BC,IAAK,6CAGPC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAgBL,OAAQA,GACtB,kBAAC,IAAD,CAAqBA,OAAQA,GAC3B,kBAAC,EAAD,SAINM,SAASC,eAAe,W","file":"static/js/main.ac057d55.chunk.js","sourcesContent":["import gql from 'graphql-tag';\nimport * as React from 'react';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactComponents from '@apollo/react-components';\nimport * as ApolloReactHoc from '@apollo/react-hoc';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Maybe<T> = T | null;\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** The `Upload` scalar type represents a file upload. */\n  Upload: any;\n};\n\nexport type Query = {\n   __typename?: 'Query';\n  capsule?: Maybe<Capsule>;\n  capsules?: Maybe<Array<Maybe<Capsule>>>;\n  core?: Maybe<Core>;\n  cores?: Maybe<Array<Maybe<Core>>>;\n  dragon?: Maybe<Dragon>;\n  dragons?: Maybe<Array<Maybe<Dragon>>>;\n  history?: Maybe<Array<Maybe<History>>>;\n  info?: Maybe<Info>;\n  landingpad?: Maybe<Landingpad>;\n  landingpads?: Maybe<Array<Maybe<Landingpad>>>;\n  launch?: Maybe<Launch>;\n  launches?: Maybe<Array<Maybe<Launch>>>;\n  launchpad?: Maybe<Launchpad>;\n  launchpads?: Maybe<Array<Maybe<Launchpad>>>;\n  mission?: Maybe<Mission>;\n  missions?: Maybe<Array<Maybe<Mission>>>;\n  payload?: Maybe<Payload>;\n  payloads?: Maybe<Array<Maybe<Payload>>>;\n  roadster?: Maybe<Roadster>;\n  rocket?: Maybe<Rocket>;\n  rockets?: Maybe<Array<Maybe<Rocket>>>;\n  ship?: Maybe<Ship>;\n  ships?: Maybe<Array<Maybe<Ship>>>;\n};\n\n\nexport type QueryCapsuleArgs = {\n  capsule_serial: Scalars['String'];\n};\n\n\nexport type QueryCapsulesArgs = {\n  range?: Maybe<CapsuleRange>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order?: Maybe<Order>;\n  sort?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryCoreArgs = {\n  core_serial: Scalars['String'];\n};\n\n\nexport type QueryCoresArgs = {\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order?: Maybe<Order>;\n  sort?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryDragonArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryDragonsArgs = {\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryHistoryArgs = {\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order?: Maybe<Order>;\n  sort?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryLandingpadArgs = {\n  id?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryLandingpadsArgs = {\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryLaunchArgs = {\n  id?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryLaunchesArgs = {\n  range?: Maybe<LaunchRange>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order?: Maybe<Order>;\n  sort?: Maybe<Scalars['String']>;\n  ids?: Maybe<Array<Maybe<Scalars['String']>>>;\n};\n\n\nexport type QueryLaunchpadArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryLaunchpadsArgs = {\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryMissionArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryMissionsArgs = {\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryPayloadArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryPayloadsArgs = {\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order?: Maybe<Order>;\n  sort?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryRocketArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryRocketsArgs = {\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryShipArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryShipsArgs = {\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order?: Maybe<Order>;\n  sort?: Maybe<Scalars['String']>;\n};\n\nexport type Capsule = {\n   __typename?: 'Capsule';\n  capsule_serial?: Maybe<Scalars['String']>;\n  capsule_id?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n  original_launch?: Maybe<Scalars['String']>;\n  original_launch_unix?: Maybe<Scalars['Float']>;\n  missions?: Maybe<Array<Maybe<BasicMission>>>;\n  landings?: Maybe<Scalars['Int']>;\n  type?: Maybe<Scalars['String']>;\n  details?: Maybe<Scalars['String']>;\n  reuse_count?: Maybe<Scalars['Int']>;\n};\n\nexport type BasicMission = {\n   __typename?: 'BasicMission';\n  name?: Maybe<Scalars['String']>;\n  flight?: Maybe<Scalars['Int']>;\n};\n\nexport enum CapsuleRange {\n  Past = 'past',\n  Upcoming = 'upcoming'\n}\n\nexport enum Order {\n  Asc = 'asc',\n  Desc = 'desc'\n}\n\nexport type Core = {\n   __typename?: 'Core';\n  core_serial?: Maybe<Scalars['String']>;\n  block?: Maybe<Scalars['Int']>;\n  status?: Maybe<Scalars['String']>;\n  original_launch?: Maybe<Scalars['String']>;\n  original_launch_unix?: Maybe<Scalars['Float']>;\n  missions?: Maybe<Array<Maybe<BasicMission>>>;\n  reuse_count?: Maybe<Scalars['Int']>;\n  rtls_attempts?: Maybe<Scalars['Int']>;\n  rtls_landings?: Maybe<Scalars['Int']>;\n  asds_attempts?: Maybe<Scalars['Int']>;\n  asds_landings?: Maybe<Scalars['Int']>;\n  water_landing?: Maybe<Scalars['Boolean']>;\n  details?: Maybe<Scalars['String']>;\n};\n\nexport type Dragon = {\n   __typename?: 'Dragon';\n  id?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  type?: Maybe<Scalars['String']>;\n  active?: Maybe<Scalars['Boolean']>;\n  crew_capacity?: Maybe<Scalars['Int']>;\n  sidewall_angle_deg?: Maybe<Scalars['Int']>;\n  orbit_duration_yr?: Maybe<Scalars['Int']>;\n  dry_mass_kg?: Maybe<Scalars['Int']>;\n  dry_mass_lb?: Maybe<Scalars['Int']>;\n  first_flight?: Maybe<Scalars['String']>;\n  heat_shield?: Maybe<HeatShield>;\n  thrusters?: Maybe<Array<Maybe<Thruster>>>;\n  launch_payload_mass?: Maybe<Mass>;\n  launch_payload_vol?: Maybe<PayloadVolume>;\n  return_payload_mass?: Maybe<Mass>;\n  return_payload_vol?: Maybe<PayloadVolume>;\n  pressurized_capsule?: Maybe<PressurizedCapsule>;\n  trunk?: Maybe<Trunk>;\n  height_w_trunk?: Maybe<Dimension>;\n  diameter?: Maybe<Dimension>;\n  wikipedia?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n};\n\nexport type HeatShield = {\n   __typename?: 'HeatShield';\n  material?: Maybe<Scalars['String']>;\n  size_meters?: Maybe<Scalars['Float']>;\n  temp_degrees?: Maybe<Scalars['Int']>;\n  dev_partner?: Maybe<Scalars['String']>;\n};\n\nexport type Thruster = {\n   __typename?: 'Thruster';\n  type?: Maybe<Scalars['String']>;\n  amount?: Maybe<Scalars['Int']>;\n  pods?: Maybe<Scalars['Int']>;\n  fuel_1?: Maybe<Scalars['String']>;\n  fuel_2?: Maybe<Scalars['String']>;\n  thrust?: Maybe<Thrust>;\n};\n\nexport type Thrust = {\n   __typename?: 'Thrust';\n  kN?: Maybe<Scalars['Float']>;\n  lbf?: Maybe<Scalars['Float']>;\n};\n\nexport type Mass = {\n   __typename?: 'Mass';\n  kg?: Maybe<Scalars['Int']>;\n  lb?: Maybe<Scalars['Int']>;\n};\n\nexport type PayloadVolume = {\n   __typename?: 'PayloadVolume';\n  cubic_meters?: Maybe<Scalars['Int']>;\n  cubic_feet?: Maybe<Scalars['Int']>;\n};\n\nexport type PressurizedCapsule = {\n   __typename?: 'PressurizedCapsule';\n  payload_volume?: Maybe<PayloadVolume>;\n};\n\nexport type Trunk = {\n   __typename?: 'Trunk';\n  trunk_volume?: Maybe<PayloadVolume>;\n  cargo?: Maybe<TrunkCargo>;\n};\n\nexport type TrunkCargo = {\n   __typename?: 'TrunkCargo';\n  solar_array?: Maybe<Scalars['Int']>;\n  unpressurized_cargo?: Maybe<Scalars['Boolean']>;\n};\n\nexport type Dimension = {\n   __typename?: 'Dimension';\n  meters?: Maybe<Scalars['Float']>;\n  feet?: Maybe<Scalars['Float']>;\n};\n\nexport type History = {\n   __typename?: 'History';\n  id?: Maybe<Scalars['Int']>;\n  title?: Maybe<Scalars['String']>;\n  event_date_utc?: Maybe<Scalars['String']>;\n  event_date_unix?: Maybe<Scalars['Float']>;\n  flight_number?: Maybe<Scalars['Int']>;\n  details?: Maybe<Scalars['String']>;\n  links?: Maybe<HistoryLinks>;\n};\n\nexport type HistoryLinks = {\n   __typename?: 'HistoryLinks';\n  article?: Maybe<Scalars['String']>;\n  reddit?: Maybe<Scalars['String']>;\n  wikipedia?: Maybe<Scalars['String']>;\n};\n\nexport type Info = {\n   __typename?: 'Info';\n  name?: Maybe<Scalars['String']>;\n  founder?: Maybe<Scalars['String']>;\n  founded?: Maybe<Scalars['Int']>;\n  employees?: Maybe<Scalars['Int']>;\n  vehicles?: Maybe<Scalars['Int']>;\n  launch_sites?: Maybe<Scalars['Int']>;\n  test_sites?: Maybe<Scalars['Int']>;\n  ceo?: Maybe<Scalars['String']>;\n  cto?: Maybe<Scalars['String']>;\n  coo?: Maybe<Scalars['String']>;\n  cto_propulsion?: Maybe<Scalars['String']>;\n  valuation?: Maybe<Scalars['Float']>;\n  headquarters?: Maybe<Headquarters>;\n  summary?: Maybe<Scalars['String']>;\n};\n\nexport type Headquarters = {\n   __typename?: 'Headquarters';\n  address?: Maybe<Scalars['String']>;\n  city?: Maybe<Scalars['String']>;\n  state?: Maybe<Scalars['String']>;\n};\n\nexport type Landingpad = {\n   __typename?: 'Landingpad';\n  id?: Maybe<Scalars['String']>;\n  full_name?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n  location?: Maybe<Location>;\n  landing_type?: Maybe<Scalars['String']>;\n  attempted_landings?: Maybe<Scalars['Int']>;\n  successful_landings?: Maybe<Scalars['Int']>;\n  wikipedia?: Maybe<Scalars['String']>;\n  details?: Maybe<Scalars['String']>;\n};\n\nexport type Location = {\n   __typename?: 'Location';\n  name?: Maybe<Scalars['String']>;\n  region?: Maybe<Scalars['String']>;\n  latitude?: Maybe<Scalars['Float']>;\n  longitude?: Maybe<Scalars['Float']>;\n};\n\nexport type Launch = {\n   __typename?: 'Launch';\n  flight_number?: Maybe<Scalars['Int']>;\n  mission_id?: Maybe<Array<Maybe<Scalars['String']>>>;\n  mission_name?: Maybe<Scalars['String']>;\n  launch_year?: Maybe<Scalars['Int']>;\n  launch_date_unix?: Maybe<Scalars['Float']>;\n  launch_date_utc?: Maybe<Scalars['String']>;\n  launch_date_local?: Maybe<Scalars['String']>;\n  is_tentative?: Maybe<Scalars['Boolean']>;\n  tentative_max_precision?: Maybe<Scalars['String']>;\n  tbd?: Maybe<Scalars['Boolean']>;\n  launch_window?: Maybe<Scalars['Int']>;\n  rocket?: Maybe<LaunchRocket>;\n  ships?: Maybe<Array<Maybe<Scalars['String']>>>;\n  telemetry?: Maybe<LaunchTelemetry>;\n  launch_site?: Maybe<LaunchSite>;\n  launch_success?: Maybe<Scalars['Boolean']>;\n  links?: Maybe<LaunchLinks>;\n  details?: Maybe<Scalars['String']>;\n  upcoming?: Maybe<Scalars['Boolean']>;\n  static_fire_date_utc?: Maybe<Scalars['String']>;\n  static_fire_date_unix?: Maybe<Scalars['Float']>;\n  timeline?: Maybe<LaunchTimeline>;\n};\n\nexport type LaunchRocket = {\n   __typename?: 'LaunchRocket';\n  rocket_id?: Maybe<Scalars['String']>;\n  rocket_name?: Maybe<Scalars['String']>;\n  rocket_type?: Maybe<Scalars['String']>;\n  first_stage?: Maybe<LaunchRocketFirstStage>;\n  second_stage?: Maybe<LaunchRocketSecondStage>;\n  fairings?: Maybe<LaunchRocketFairings>;\n};\n\nexport type LaunchRocketFirstStage = {\n   __typename?: 'LaunchRocketFirstStage';\n  cores?: Maybe<Array<Maybe<LaunchRocketFirstStageCore>>>;\n};\n\nexport type LaunchRocketFirstStageCore = {\n   __typename?: 'LaunchRocketFirstStageCore';\n  core_serial?: Maybe<Scalars['String']>;\n  flight?: Maybe<Scalars['Int']>;\n  block?: Maybe<Scalars['Int']>;\n  gridfins?: Maybe<Scalars['Boolean']>;\n  legs?: Maybe<Scalars['Boolean']>;\n  reused?: Maybe<Scalars['Boolean']>;\n  land_success?: Maybe<Scalars['Boolean']>;\n  landing_intent?: Maybe<Scalars['Boolean']>;\n  landing_type?: Maybe<Scalars['String']>;\n  landing_vehicle?: Maybe<Scalars['String']>;\n};\n\nexport type LaunchRocketSecondStage = {\n   __typename?: 'LaunchRocketSecondStage';\n  block?: Maybe<Scalars['Int']>;\n  payloads?: Maybe<Array<Maybe<Payload>>>;\n};\n\nexport type Payload = {\n   __typename?: 'Payload';\n  payload_id?: Maybe<Scalars['String']>;\n  norad_id?: Maybe<Array<Maybe<Scalars['String']>>>;\n  cap_serial?: Maybe<Scalars['String']>;\n  reused?: Maybe<Scalars['Boolean']>;\n  customers?: Maybe<Array<Maybe<Scalars['String']>>>;\n  nationality?: Maybe<Scalars['String']>;\n  manufacturer?: Maybe<Scalars['String']>;\n  payload_type?: Maybe<Scalars['String']>;\n  payload_mass_kg?: Maybe<Scalars['Float']>;\n  payload_mass_lbs?: Maybe<Scalars['Float']>;\n  orbit?: Maybe<Scalars['String']>;\n  orbit_params?: Maybe<PayloadOrbitParams>;\n  mass_returned_kg?: Maybe<Scalars['Float']>;\n  mass_returned_lbs?: Maybe<Scalars['Float']>;\n  flight_time_sec?: Maybe<Scalars['Int']>;\n  cargo_manifest?: Maybe<Scalars['String']>;\n};\n\nexport type PayloadOrbitParams = {\n   __typename?: 'PayloadOrbitParams';\n  reference_system?: Maybe<Scalars['String']>;\n  regime?: Maybe<Scalars['String']>;\n  longitude?: Maybe<Scalars['Float']>;\n  semi_major_axis_km?: Maybe<Scalars['Float']>;\n  eccentricity?: Maybe<Scalars['Float']>;\n  periapsis_km?: Maybe<Scalars['Float']>;\n  apoapsis_km?: Maybe<Scalars['Float']>;\n  inclination_deg?: Maybe<Scalars['Float']>;\n  period_min?: Maybe<Scalars['Float']>;\n  lifespan_years?: Maybe<Scalars['Float']>;\n  epoch?: Maybe<Scalars['String']>;\n  mean_motion?: Maybe<Scalars['Float']>;\n  raan?: Maybe<Scalars['Float']>;\n  arg_of_pericenter?: Maybe<Scalars['Float']>;\n  mean_anomaly?: Maybe<Scalars['Float']>;\n};\n\nexport type LaunchRocketFairings = {\n   __typename?: 'LaunchRocketFairings';\n  reused?: Maybe<Scalars['Boolean']>;\n  recovery_attempt?: Maybe<Scalars['Boolean']>;\n  recovered?: Maybe<Scalars['Boolean']>;\n  ship?: Maybe<Scalars['String']>;\n};\n\nexport type LaunchTelemetry = {\n   __typename?: 'LaunchTelemetry';\n  flight_club?: Maybe<Scalars['String']>;\n};\n\nexport type LaunchSite = {\n   __typename?: 'LaunchSite';\n  site_id?: Maybe<Scalars['String']>;\n  site_name?: Maybe<Scalars['String']>;\n  site_name_long?: Maybe<Scalars['String']>;\n};\n\nexport type LaunchLinks = {\n   __typename?: 'LaunchLinks';\n  mission_patch?: Maybe<Scalars['String']>;\n  mission_patch_small?: Maybe<Scalars['String']>;\n  reddit_campaign?: Maybe<Scalars['String']>;\n  reddit_launch?: Maybe<Scalars['String']>;\n  reddit_recovery?: Maybe<Scalars['String']>;\n  reddit_media?: Maybe<Scalars['String']>;\n  presskit?: Maybe<Scalars['String']>;\n  article_link?: Maybe<Scalars['String']>;\n  wikipedia?: Maybe<Scalars['String']>;\n  video_link?: Maybe<Scalars['String']>;\n  youtube_id?: Maybe<Scalars['String']>;\n  flickr_images?: Maybe<Array<Maybe<Scalars['String']>>>;\n};\n\nexport type LaunchTimeline = {\n   __typename?: 'LaunchTimeline';\n  webcast_liftoff?: Maybe<Scalars['Int']>;\n  go_for_prop_loading?: Maybe<Scalars['Int']>;\n  rp1_loading?: Maybe<Scalars['Int']>;\n  stage1_rp1_loading?: Maybe<Scalars['Int']>;\n  stage1_lox_loading?: Maybe<Scalars['Int']>;\n  stage2_rp1_loading?: Maybe<Scalars['Int']>;\n  stage2_lox_loading?: Maybe<Scalars['Int']>;\n  engine_chill?: Maybe<Scalars['Int']>;\n  prelaunch_checks?: Maybe<Scalars['Int']>;\n  propellant_pressurization?: Maybe<Scalars['Int']>;\n  go_for_launch?: Maybe<Scalars['Int']>;\n  ignition?: Maybe<Scalars['Int']>;\n  liftoff?: Maybe<Scalars['Int']>;\n  maxq?: Maybe<Scalars['Int']>;\n  beco?: Maybe<Scalars['Int']>;\n  side_core_sep?: Maybe<Scalars['Int']>;\n  side_core_boostback?: Maybe<Scalars['Int']>;\n  meco?: Maybe<Scalars['Int']>;\n  stage_sep?: Maybe<Scalars['Int']>;\n  center_stage_sep?: Maybe<Scalars['Int']>;\n  second_stage_ignition?: Maybe<Scalars['Int']>;\n  center_core_boostback?: Maybe<Scalars['Int']>;\n  fairing_deploy?: Maybe<Scalars['Int']>;\n  first_stage_entry_burn?: Maybe<Scalars['Int']>;\n  side_core_entry_burn?: Maybe<Scalars['Int']>;\n  center_core_entry_burn?: Maybe<Scalars['Int']>;\n  seco_1?: Maybe<Scalars['Int']>;\n  first_stage_landing_burn?: Maybe<Scalars['Int']>;\n  first_stage_landing?: Maybe<Scalars['Int']>;\n  side_core_landing?: Maybe<Scalars['Int']>;\n  center_core_landing?: Maybe<Scalars['Int']>;\n  second_stage_restart?: Maybe<Scalars['Int']>;\n  seco_2?: Maybe<Scalars['Int']>;\n  payload_deploy?: Maybe<Scalars['Int']>;\n  payload_deploy_1?: Maybe<Scalars['Int']>;\n  payload_deploy_2?: Maybe<Scalars['Int']>;\n  dragon_separation?: Maybe<Scalars['Int']>;\n  dragon_solar_deploy?: Maybe<Scalars['Int']>;\n  dragon_bay_door_deploy?: Maybe<Scalars['Int']>;\n};\n\nexport enum LaunchRange {\n  Latest = 'latest',\n  Next = 'next',\n  Past = 'past',\n  Upcoming = 'upcoming'\n}\n\nexport type Launchpad = {\n   __typename?: 'Launchpad';\n  id?: Maybe<Scalars['Int']>;\n  status?: Maybe<Scalars['String']>;\n  location?: Maybe<Location>;\n  vehicles_launched?: Maybe<Array<Maybe<Scalars['String']>>>;\n  attempted_launches?: Maybe<Scalars['Int']>;\n  successful_launches?: Maybe<Scalars['Int']>;\n  wikipedia?: Maybe<Scalars['String']>;\n  details?: Maybe<Scalars['String']>;\n  site_id?: Maybe<Scalars['String']>;\n  site_name_long?: Maybe<Scalars['String']>;\n};\n\nexport type Mission = {\n   __typename?: 'Mission';\n  mission_name?: Maybe<Scalars['String']>;\n  mission_id?: Maybe<Scalars['String']>;\n  manufacturers?: Maybe<Array<Maybe<Scalars['String']>>>;\n  payload_ids?: Maybe<Array<Maybe<Scalars['String']>>>;\n  wikipedia?: Maybe<Scalars['String']>;\n  website?: Maybe<Scalars['String']>;\n  twitter?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n};\n\nexport type Roadster = {\n   __typename?: 'Roadster';\n  name: Scalars['String'];\n  launch_date_utc?: Maybe<Scalars['String']>;\n  launch_date_unix?: Maybe<Scalars['Float']>;\n  launch_mass_kg?: Maybe<Scalars['Int']>;\n  launch_mass_lbs?: Maybe<Scalars['Int']>;\n  norad_id?: Maybe<Scalars['Int']>;\n  epoch_jd?: Maybe<Scalars['Float']>;\n  orbit_type?: Maybe<Scalars['String']>;\n  apoapsis_au?: Maybe<Scalars['Float']>;\n  semi_major_axis_au?: Maybe<Scalars['Float']>;\n  eccentricity?: Maybe<Scalars['Float']>;\n  inclination?: Maybe<Scalars['Float']>;\n  longitude?: Maybe<Scalars['Float']>;\n  periapsis_arg?: Maybe<Scalars['Float']>;\n  period_days?: Maybe<Scalars['Float']>;\n  speed_kph?: Maybe<Scalars['Float']>;\n  speed_mph?: Maybe<Scalars['Float']>;\n  earth_distance_km?: Maybe<Scalars['Float']>;\n  earth_distance_mi?: Maybe<Scalars['Float']>;\n  mars_distance_km?: Maybe<Scalars['Float']>;\n  mars_distance_mi?: Maybe<Scalars['Float']>;\n  wikipedia?: Maybe<Scalars['String']>;\n  details?: Maybe<Scalars['String']>;\n};\n\nexport type Rocket = {\n   __typename?: 'Rocket';\n  id?: Maybe<Scalars['Int']>;\n  active?: Maybe<Scalars['Boolean']>;\n  stages?: Maybe<Scalars['Int']>;\n  boosters?: Maybe<Scalars['Int']>;\n  cost_per_launch?: Maybe<Scalars['Int']>;\n  success_rate_pct?: Maybe<Scalars['Float']>;\n  first_flight?: Maybe<Scalars['String']>;\n  country?: Maybe<Scalars['String']>;\n  company?: Maybe<Scalars['String']>;\n  height?: Maybe<Dimension>;\n  diameter?: Maybe<Dimension>;\n  mass?: Maybe<Mass>;\n  payload_weights?: Maybe<Array<Maybe<RocketPayloadWeight>>>;\n  first_stage?: Maybe<RocketFirstStage>;\n  second_stage?: Maybe<RocketSecondStage>;\n  engines?: Maybe<Engines>;\n  landing_legs?: Maybe<LandingLegs>;\n  flickr_images?: Maybe<Array<Maybe<Scalars['String']>>>;\n  wikipedia?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  rocket_id?: Maybe<Scalars['String']>;\n  rocket_name?: Maybe<Scalars['String']>;\n  rocket_type?: Maybe<Scalars['String']>;\n};\n\nexport type RocketPayloadWeight = {\n   __typename?: 'RocketPayloadWeight';\n  id?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  kg?: Maybe<Scalars['Float']>;\n  lb?: Maybe<Scalars['Float']>;\n};\n\nexport type RocketFirstStage = {\n   __typename?: 'RocketFirstStage';\n  reusable?: Maybe<Scalars['Boolean']>;\n  engines?: Maybe<Scalars['Int']>;\n  fuel_amount_tons?: Maybe<Scalars['Float']>;\n  burn_time_sec?: Maybe<Scalars['Int']>;\n  thrust_sea_level?: Maybe<Thrust>;\n  thrust_vacuum?: Maybe<Thrust>;\n};\n\nexport type RocketSecondStage = {\n   __typename?: 'RocketSecondStage';\n  engines?: Maybe<Scalars['Int']>;\n  fuel_amount_tons?: Maybe<Scalars['Float']>;\n  burn_time_sec?: Maybe<Scalars['Int']>;\n  thrust?: Maybe<Thrust>;\n  payloads?: Maybe<RocketPayload>;\n};\n\nexport type RocketPayload = {\n   __typename?: 'RocketPayload';\n  option_1?: Maybe<Scalars['String']>;\n  option_2?: Maybe<Scalars['String']>;\n  composite_fairing?: Maybe<Fairing>;\n};\n\nexport type Fairing = {\n   __typename?: 'Fairing';\n  height?: Maybe<Dimension>;\n  diameter?: Maybe<Dimension>;\n};\n\nexport type Engines = {\n   __typename?: 'Engines';\n  number?: Maybe<Scalars['Int']>;\n  type?: Maybe<Scalars['String']>;\n  version?: Maybe<Scalars['String']>;\n  layout?: Maybe<Scalars['String']>;\n  engine_loss_max?: Maybe<Scalars['Int']>;\n  propellant_1?: Maybe<Scalars['String']>;\n  propellant_2?: Maybe<Scalars['String']>;\n  thrust_sea_level?: Maybe<Thrust>;\n  thrust_vacuum?: Maybe<Thrust>;\n  thrust_to_weight?: Maybe<Scalars['Float']>;\n};\n\nexport type LandingLegs = {\n   __typename?: 'LandingLegs';\n  number?: Maybe<Scalars['Int']>;\n  material?: Maybe<Scalars['String']>;\n};\n\nexport type Ship = {\n   __typename?: 'Ship';\n  ship_id?: Maybe<Scalars['String']>;\n  ship_name?: Maybe<Scalars['String']>;\n  ship_model?: Maybe<Scalars['String']>;\n  ship_type?: Maybe<Scalars['String']>;\n  roles?: Maybe<Array<Maybe<Scalars['String']>>>;\n  active?: Maybe<Scalars['Boolean']>;\n  imo?: Maybe<Scalars['Int']>;\n  mmsi?: Maybe<Scalars['Int']>;\n  abs?: Maybe<Scalars['Int']>;\n  class?: Maybe<Scalars['Int']>;\n  weight_lbs?: Maybe<Scalars['Float']>;\n  weight_kg?: Maybe<Scalars['Float']>;\n  year_built?: Maybe<Scalars['Int']>;\n  home_port?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n  speed_kn?: Maybe<Scalars['Float']>;\n  course_deg?: Maybe<Scalars['Float']>;\n  position?: Maybe<Position>;\n  successful_landings?: Maybe<Scalars['Int']>;\n  attempted_landings?: Maybe<Scalars['Int']>;\n  missions?: Maybe<Array<Maybe<BasicMission>>>;\n  url?: Maybe<Scalars['String']>;\n  image?: Maybe<Scalars['String']>;\n};\n\nexport type Position = {\n   __typename?: 'Position';\n  latitude?: Maybe<Scalars['Float']>;\n  longitude?: Maybe<Scalars['Float']>;\n};\n\nexport enum CacheControlScope {\n  Public = 'PUBLIC',\n  Private = 'PRIVATE'\n}\n\n\nexport type LaunchQueryVariables = {\n  id: Scalars['String'];\n};\n\n\nexport type LaunchQuery = (\n  { __typename?: 'Query' }\n  & { launch?: Maybe<(\n    { __typename?: 'Launch' }\n    & Pick<Launch, 'flight_number' | 'mission_name' | 'launch_year' | 'launch_success' | 'details'>\n    & { launch_site?: Maybe<(\n      { __typename?: 'LaunchSite' }\n      & Pick<LaunchSite, 'site_name'>\n    )>, rocket?: Maybe<(\n      { __typename?: 'LaunchRocket' }\n      & Pick<LaunchRocket, 'rocket_name' | 'rocket_type'>\n    )>, links?: Maybe<(\n      { __typename?: 'LaunchLinks' }\n      & Pick<LaunchLinks, 'flickr_images'>\n    )> }\n  )> }\n);\n\nexport type LaunchesQueryVariables = {};\n\n\nexport type LaunchesQuery = (\n  { __typename?: 'Query' }\n  & { launches?: Maybe<Array<Maybe<(\n    { __typename?: 'Launch' }\n    & Pick<Launch, 'flight_number' | 'mission_name' | 'launch_year'>\n  )>>> }\n);\n\n\nexport const LaunchDocument = gql`\n    query Launch($id: String!) {\n  launch(id: $id) {\n    flight_number\n    mission_name\n    launch_year\n    launch_success\n    details\n    launch_site {\n      site_name\n    }\n    rocket {\n      rocket_name\n      rocket_type\n    }\n    links {\n      flickr_images\n    }\n  }\n}\n    `;\nexport type LaunchComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<LaunchQuery, LaunchQueryVariables>, 'query'> & ({ variables: LaunchQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const LaunchComponent = (props: LaunchComponentProps) => (\n      <ApolloReactComponents.Query<LaunchQuery, LaunchQueryVariables> query={LaunchDocument} {...props} />\n    );\n    \nexport type LaunchProps<TChildProps = {}, TDataName extends string = 'data'> = {\n      [key in TDataName]: ApolloReactHoc.DataValue<LaunchQuery, LaunchQueryVariables>\n    } & TChildProps;\nexport function withLaunch<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  LaunchQuery,\n  LaunchQueryVariables,\n  LaunchProps<TChildProps, TDataName>>) {\n    return ApolloReactHoc.withQuery<TProps, LaunchQuery, LaunchQueryVariables, LaunchProps<TChildProps, TDataName>>(LaunchDocument, {\n      alias: 'launch',\n      ...operationOptions\n    });\n};\n\n/**\n * __useLaunchQuery__\n *\n * To run a query within a React component, call `useLaunchQuery` and pass it any options that fit your needs.\n * When your component renders, `useLaunchQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useLaunchQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useLaunchQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<LaunchQuery, LaunchQueryVariables>) {\n        return ApolloReactHooks.useQuery<LaunchQuery, LaunchQueryVariables>(LaunchDocument, baseOptions);\n      }\nexport function useLaunchLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<LaunchQuery, LaunchQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<LaunchQuery, LaunchQueryVariables>(LaunchDocument, baseOptions);\n        }\nexport type LaunchQueryHookResult = ReturnType<typeof useLaunchQuery>;\nexport type LaunchLazyQueryHookResult = ReturnType<typeof useLaunchLazyQuery>;\nexport type LaunchQueryResult = ApolloReactCommon.QueryResult<LaunchQuery, LaunchQueryVariables>;\nexport const LaunchesDocument = gql`\n    query Launches {\n  launches {\n    flight_number\n    mission_name\n    launch_year\n  }\n}\n    `;\nexport type LaunchesComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<LaunchesQuery, LaunchesQueryVariables>, 'query'>;\n\n    export const LaunchesComponent = (props: LaunchesComponentProps) => (\n      <ApolloReactComponents.Query<LaunchesQuery, LaunchesQueryVariables> query={LaunchesDocument} {...props} />\n    );\n    \nexport type LaunchesProps<TChildProps = {}, TDataName extends string = 'data'> = {\n      [key in TDataName]: ApolloReactHoc.DataValue<LaunchesQuery, LaunchesQueryVariables>\n    } & TChildProps;\nexport function withLaunches<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  LaunchesQuery,\n  LaunchesQueryVariables,\n  LaunchesProps<TChildProps, TDataName>>) {\n    return ApolloReactHoc.withQuery<TProps, LaunchesQuery, LaunchesQueryVariables, LaunchesProps<TChildProps, TDataName>>(LaunchesDocument, {\n      alias: 'launches',\n      ...operationOptions\n    });\n};\n\n/**\n * __useLaunchesQuery__\n *\n * To run a query within a React component, call `useLaunchesQuery` and pass it any options that fit your needs.\n * When your component renders, `useLaunchesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useLaunchesQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useLaunchesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<LaunchesQuery, LaunchesQueryVariables>) {\n        return ApolloReactHooks.useQuery<LaunchesQuery, LaunchesQueryVariables>(LaunchesDocument, baseOptions);\n      }\nexport function useLaunchesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<LaunchesQuery, LaunchesQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<LaunchesQuery, LaunchesQueryVariables>(LaunchesDocument, baseOptions);\n        }\nexport type LaunchesQueryHookResult = ReturnType<typeof useLaunchesQuery>;\nexport type LaunchesLazyQueryHookResult = ReturnType<typeof useLaunchesLazyQuery>;\nexport type LaunchesQueryResult = ApolloReactCommon.QueryResult<LaunchesQuery, LaunchesQueryVariables>;","import React from 'react';\nimport { Launch, useLaunchesQuery } from '../../generated/graphql';\nimport { QueryResult } from 'react-apollo';\n\nexport type LaunchesProp = {\n  clickHandler: Function;\n  id: number;\n};\n\nconst Launches = ({ clickHandler, id }: LaunchesProp) => {\n  const { data, error, loading }: QueryResult = useLaunchesQuery();\n\n  if (loading) {\n    return <div className='alert alert-info'>...Loading</div>;\n  }\n\n  if (error || !data) {\n    return <div className='alert alert-danger'>{JSON.stringify(error)}</div>;\n  }\n\n  const { launches } = data;\n\n  return (\n    <div className='card'>\n      <h4 className='card-header'>Missions</h4>\n      <ul className='list-group list-group-flush'>\n        {launches.map(\n          ({ flight_number, mission_name, launch_year }: Launch) => (\n            // eslint-disable-next-line jsx-a11y/anchor-is-valid\n            <a\n              href='#'\n              key={flight_number as string | number | undefined}\n              className={`list-group-item list-group-item-action ${\n                id === flight_number ? 'active' : ''\n              } d-flex justify-content-between align-items-center`}\n              onClick={(e) => {\n                e.preventDefault();\n                clickHandler(flight_number);\n              }}\n            >\n              <span>{mission_name}</span>\n              <span className='badge badge-primary badge-pill'>\n                {launch_year}\n              </span>\n            </a>\n          )\n        )}\n      </ul>\n    </div>\n  );\n};\n\nexport default Launches;\n","import React from 'react';\nimport { useLaunchQuery } from '../../generated/graphql';\nimport { QueryResult } from 'react-apollo';\n\nconst Launch = ({ id }: { id: number }) => {\n  const { data, error, loading }: QueryResult = useLaunchQuery({\n    variables: { id: String(id) },\n  });\n\n  if (loading) {\n    return <div className='alert alert-info'>...Loading</div>;\n  }\n\n  if (error) {\n    return <div className='alert alert-danger'>{JSON.stringify(error)}</div>;\n  }\n\n  if (!data) {\n    return <div>Select a flight from the panel</div>;\n  }\n\n  const {\n    launch: {\n      flight_number,\n      mission_name,\n      launch_success,\n      rocket: { rocket_name, rocket_type },\n      details,\n      links: { flickr_images },\n    },\n  } = data;\n  return (\n    <div className='card'>\n      <div className='card-header'>\n        {mission_name}{' '}\n        <span className='badge badge-secondary badge-pill'>\n          {launch_success}\n        </span>\n      </div>\n      <div className='card-body'>\n        <h5 className='card-title'>\n          {rocket_name}{' '}\n          <span className='badge badge-secondary badge-pill'>\n            {rocket_type}\n          </span>\n        </h5>\n        <p className='card-text'>{details}</p>\n      </div>\n      <ul className='list-group list-group-flush'>\n        {flickr_images.map((image: string, i: number) => (\n          <li key={i} className='list-group-item'>\n            <img className='img-fluid' src={image} alt={image} />\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Launch;\n","import React, { useCallback, useState } from 'react';\nimport Launches from './components/Launches/Launches';\nimport Launch from './components/Launch/Launch';\n\nconst App = () => {\n  const [id, setId] = useState(42);\n  const clickHandler = useCallback((newId) => setId(newId), []);\n  return (\n    <>\n      <nav className='navbar navbar-light bg-light mb-3'>\n        <div className='container'>\n          <span className='navbar-brand mb-0 h1'>SpaceX Launches</span>\n        </div>\n      </nav>\n      <main className='container mb-3' role='main'>\n        <div className='row'>\n          <div className='col-sm-4'>\n            <Launches {...{ clickHandler, id }} />\n          </div>\n          <div className='col-sm-8'>\n            <Launch id={id} />\n          </div>\n        </div>\n      </main>\n      <footer className='py-3 bg-dark text-muted'>\n        <div className='container'>\n          <p className='float-right'>\n            <a href='#'>Back to top</a>\n          </p>\n          <p>SpaceX Launches</p>\n        </div>\n      </footer>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport { ApolloProvider as ApolloHooksProvider } from 'react-apollo-hooks';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nconst client = new ApolloClient({\n  uri: 'https://spacexdata.herokuapp.com/graphql',\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <ApolloHooksProvider client={client}>\n        <App />\n      </ApolloHooksProvider>\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}